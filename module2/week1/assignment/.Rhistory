tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
o <- tapply(mtcars$hp, mtcars$cyl, mean)
o(3)-o(1)
o[3]-o[1]
install_from_swirl("R Programming")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
x <- 5+7
x
y <- x-3
9
y
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555)
z <- c(z, 555, z)
info()
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
?args
args(list.files)
old.dir <- getwd()
arg(dir.create)
args(dir.create)
dir.create(testdir)
dir.create("testdir)
""
""
dir.create("testdir")
setwd("testdir/")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path
file.path("mytest3.R")
args(file.path)
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
dir()
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(1,20, by=0.5)
seq(0,20, by=0.5)
seq(0,100, by=0.5)
seq(0,10, by=0.5)
seq(5, 10, lenth=30)
my_seq <- seq(5, 10, lenth=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
?tf
??tf
tf <- num_vect < 1
tf
p <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "your_name_here")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[is.na(x) & x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- unnamed(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(my_vector, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
FALSE = TRUE
FALSE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 != 7)
5 == 7
5 NOT 7
not(5 == 7)
?not
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.49
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twin", "twin")
identical("twins", "twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
int > 5
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remaineder(divisor=11, num=5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(st, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
telegram("I", "hate", "you")
submit()
mad_libs("la ciotat", "good", "kishwar")
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(3,4,5,5,5,6,6)
unique(c(3,4,5,5,5,6,6)
)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls
ls
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, c(10))
rpois(5, 10)
my_pois  <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays()
d1 <- weekdays(t2)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data("cars")
data(cars)
?cars
head(cars)
plot()
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main("My Plot"))
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
mtcars
data(mtcars)
?boxplot
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
x
e <- rnorm(10,0,20)
e
y <- 0.5 + 2 * x + e
y
plot(y)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
install.packages("RWeka")
library(RWeka)
detach("package:RWeka", unload = TRUE)
install.packages("gmodels")
j = list(x = 1:4, b = rnorm(100,1,2))
j
lapply(j, mean)
x=c(1:10)
y=c(1:10)
par(bg = "#646989", las = 1, col.lab = "black", col.axis = "white",bty = "n",cex.axis = 0.9,cex.lab= 1.5)
plot(x,y, pch = 20, xlab = "fake x data", ylab = "fake y data")
install.packages("ISLR")
setwd("~/Desktop/MachineLearningCourse/module2/week1/assignment/")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
train.head()
head(train)
View(train)
train('price')
train['price']
train['price'].mean()
mean(train['price'])
mean(as.numeric(train['price']))
as.numeric(train['price'])
head(train['price'])
head(train[['price']])
mean(train[['price']])
sum(train[['price']])/length(train[['price']])
print("aa")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
train
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
lm("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
debug("main")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
tr <- read.csv("kc_house_train_data.csv")
input_feature <- tr[['sqft_living']]
input_feature * input_feature
a <- input_feature * input_feature
sum(a)
sum(as.numeric(a))
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
train
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
debug(main)
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
debug(main)
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
debug("inverse_regression_predictions")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
debug("inverse_regression_predictions")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
debug("inverse_regression_predictions")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
source("week1.R")
train <- main("kc_house_train_data.csv", "kc_house_test_data.csv")
train
train[1] < train[2]
train[2] < train[1]
W0 = 4569
W1 = 143
y = W0 + W1*10
y
z = y*2
z-W0
(z-W0)/W1
280.76 * 0.092903
280.76/0.092903
280.76/0.092903
